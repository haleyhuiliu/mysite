{"version":3,"sources":["App.js","serviceWorker.js","i18n.js","index.js"],"names":["LanguageSelector","languages","useTranslation","t","i18n","useState","languageIndex","setLanguageIndex","Tabs","aria-label","indicatorColor","onChange","e","i","changeLanguage","textColor","value","variant","Tab","label","MyComponent","Typography","align","component","IconButton","color","href","target","gutterBottom","Card","CardContent","Stepper","orientation","map","index","Step","active","key","StepLabel","StepIconComponent","LocationOnIcon","StepContent","Array","fill","v","App","className","fallback","Container","maxWidth","Boolean","window","location","hostname","match","use","Backend","LanguageDetector","initReactI18next","init","lng","backend","fallbackLng","debug","ns","defaultNS","keySeparator","interpolation","escapeValue","formatSeparator","react","wait","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.783424d0.chunk.js","sourcesContent":["import React, { Fragment, Suspense, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Container from '@material-ui/core/Container';\nimport IconButton from '@material-ui/core/IconButton';\nimport Step from '@material-ui/core/Step';\nimport StepContent from '@material-ui/core/StepContent';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Stepper from '@material-ui/core/Stepper';\nimport Tab from '@material-ui/core/Tab';\nimport Tabs from '@material-ui/core/Tabs';\nimport Typography from '@material-ui/core/Typography';\nimport EmailIcon from '@material-ui/icons/Email';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\n\nfunction LanguageSelector() {\n  const languages = ['en', 'zh'];\n  const { t, i18n } = useTranslation();\n  const [languageIndex, setLanguageIndex] = useState(0);\n\n  const handleChangeIndex = (e, i) => {\n    setLanguageIndex(i);\n    i18n.changeLanguage(languages[i]);\n  };\n\n  return (\n    <Tabs\n      aria-label=\"language tabs\"\n      indicatorColor=\"primary\"\n      onChange={handleChangeIndex}\n      textColor=\"primary\"\n      value={languageIndex}\n      variant=\"fullWidth\"\n    >\n      <Tab label={t('language-en.label')} />\n      <Tab label={t('language-zh.label')} />\n    </Tabs>\n  );\n}\n\nfunction MyComponent() {\n  const { t } = useTranslation();\n\n  return (\n    <Fragment>\n      <Typography align=\"right\" component=\"div\">\n        <IconButton\n          aria-label=\"gitHub link\"\n          color=\"primary\"\n          href=\"https://github.com/haleyhuiliu\"\n          target=\"_blank\"\n        >\n          <GitHubIcon />\n        </IconButton>\n        <IconButton\n          aria-label=\"linkedin link\"\n          color=\"primary\"\n          href=\"https://www.linkedin.com/in/hui-hliu\"\n          target=\"_blank\"\n        >\n          <LinkedInIcon />\n        </IconButton>\n        <IconButton color=\"primary\" href=\"mailto:huiliu1110@gmail.com\">\n          <EmailIcon />\n        </IconButton>\n      </Typography>\n\n      <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n        {t('name.label')}\n      </Typography>\n      <Card>\n        <CardContent>\n          <Typography variant=\"h6\" component=\"h2\">\n            {t('section.summary.title')}\n          </Typography>\n          <Typography variant=\"body1\" component=\"p\">\n            4+ years of professional experience in web application development,\n            with working knowledge of modern JavaScript frameworks including\n            React, jQuery, and Node/Express.\n          </Typography>\n        </CardContent>\n      </Card>\n      <br />\n\n      <Card>\n        <CardContent>\n          <Typography variant=\"h6\" component=\"h2\">\n            {t('section.experience.title')}\n          </Typography>\n          <Typography variant=\"body2\" component=\"p\">\n            <Stepper orientation=\"vertical\">\n              {[4, 3, 2, 1].map(index => (\n                <Step active key={index}>\n                  <StepLabel StepIconComponent={LocationOnIcon}>\n                    <Typography component=\"h3\" variant=\"h6\">\n                      {t(`section.experience.${index}.title`)}\n                    </Typography>\n                  </StepLabel>\n                  <StepContent>\n                    {[\n                      { key: 'company', variant: 'subtitle1' },\n                      { key: 'dates', variant: 'subtitle2' }\n                    ].map(({ key, variant }) => (\n                      <Typography component=\"p\" key={key} variant={variant}>\n                        {t(`section.experience.${index}.${key}`)}\n                      </Typography>\n                    ))}\n                    {new Array(5)\n                      .fill(0)\n                      .map((v, i) => ({\n                        key: `duties.${i + 1}`,\n                        variant: 'body1'\n                      }))\n                      .map(({ key, variant }) => (\n                        <Typography component=\"p\" key={key} variant={variant}>\n                          - {t(`section.experience.${index}.${key}`)}\n                        </Typography>\n                      ))}\n                  </StepContent>\n                </Step>\n              ))}\n            </Stepper>\n          </Typography>\n        </CardContent>\n      </Card>\n      <br />\n      <Card>\n        <CardContent>\n          <Typography variant=\"h6\" component=\"h2\">\n            {t('section.education.title')}\n          </Typography>\n          <Typography variant=\"body2\" component=\"p\"></Typography>\n        </CardContent>\n      </Card>\n    </Fragment>\n  );\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header />\n      <Suspense fallback=\"loading\">\n        <Container maxWidth=\"md\">\n          <LanguageSelector />\n          <MyComponent />\n        </Container>\n      </Suspense>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport Backend from 'i18next-xhr-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n// not like to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\ni18n\n  // load translation using xhr -> see /public/locales\n  // learn more: https://github.com/i18next/i18next-xhr-backend\n  .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    lng: 'en',\n    backend: {\n      /* translation file path */\n      // loadPath: '/assets/i18n/{{ns}}/{{lng}}.json'\n    },\n    fallbackLng: 'en',\n    debug: true,\n    /* can have multiple namespace, in case you want to divide a huge translation into smaller pieces and load them on demand */\n    ns: ['translations'],\n    defaultNS: 'translations',\n    keySeparator: false,\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n      formatSeparator: ','\n    },\n    react: {\n      wait: true\n    }\n  });\n\nexport default i18n;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\n// import i18n (needs to be bundled ;))\nimport './i18n';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}